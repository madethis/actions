tconame: "Create app release"
description: |
  Create a new app release on a local "releases" branch

runs:
  using: composite
  steps:
  - name: Source branch
    uses: actions/checkout@v4
    with:
      path: source

  - name: History checkout (without trees and blobs)
    uses: actions/checkout@v4
    with:
      fetch-depth: 0 # History for changelog
      filter: tree:0
      path: history

  - name: Checkout releases branch
    uses: actions/checkout@v4
    id: checkout-releases-branch
    continue-on-error: true
    with:
      path: releases
      ref: "releases"

  - name: Get last release commit
    uses: actions/github-script@v7
    id: last-release-commit
    with:
      script: |
        const fs = require("fs");

        const currentCommitSha = process.env.GITHUB_SHA

        let gitLogRange = currentCommitSha

        try {
          const metadata = JSON.parse(fs.readFileSync("./releases/release.json", "utf8"));

          gitLogRange = `${metadata.commitId}..${currentCommitSha}`
        } catch (e) {
          console.error(`Error reading releases/release.json`, e);
        }

        core.setOutput("git-log-range", gitLogRange);
        core.summary.addRaw(`Git changelog range: \`${gitLogRange}\``).write();

  - name: Generate git-log.txt
    shell: bash
    working-directory: history
    run: |
      git log "${{ steps.last-release-commit.outputs.git-log-range }}" > ../git-log.txt

  - name: Start releases branch from current branch, if not exists
    if: steps.checkout-releases-branch.outcome == 'failure'
    uses: actions/checkout@v4
    with:
      path: releases

  - name: Create release
    shell: bash
    working-directory: source
    run: |
      export TZ="Europe/Copenhagen"
      node "${{ github.action_path }}/create-app-release.js"

  - name: Release version
    uses: actions/github-script@v7
    id: release-version
    with:
      script: |
        const fs = require("fs");

        const appJson = JSON.parse(fs.readFileSync("./source/app.json", "utf8"));

        core.setOutput("version", appJson.expo.version);

        // Setup release metadata
        const commitId = process.env.GITHUB_SHA;

        fs.writeFileSync("./source/release.json", JSON.stringify({commitId}, null, 2));

        core.summary
          .addRaw(`Release version: \`${appJson.expo.version}\``)
          .write()

  - name: Create destination dir for new release commit
    shell: bash
    run: |
      cp -r source destination
      rm -rf destination/.git
      cp -r releases/.git destination/.git

  - name: Setup git user info
    shell: bash
    working-directory: source
    run: |
      set -eou pipefail

      git_author="$(git show -s HEAD --format='%an')" || exit 1
      git_author_email="$(git show -s HEAD --format='%ae')" || exit 1

      echo "git author: \"${git_author}\""
      echo "git author email: \"${git_author_email}\""

      git config --global user.name "$git_author"
      git config --global user.email "$git_author_email"

      git config push.default current

  - name: Generate commit message.txt
    working-directory: destination
    shell: bash
    run: |
      echo "${{ steps.release-version.outputs.version }} " > ../message.txt
      echo >> ../message.txt

      echo "author-commit-id: ${{ github.sha }}" >> ../message.txt
      echo >> ../message.txt

      cat ../git-log.txt >> ../message.txt

  - name: Commit & push changes
    uses: actions/github-script@v7
    with:
      script: |
        process.chdir("./destination");

        // # Try creating the branch (for first time)
        // git switch -c "releases" || true
        await exec.exec("git", ["switch", "-c", "releases"], { silent: true, ignoreReturnCode: true });

        // git add .
        await exec.exec("git", ["add", "."]);

        // # Test for changes
        // git diff-index --quiet HEAD
        const hasChanges = await exec.exec("git", ["diff-index", "--quiet", "HEAD"], { silent: true, ignoreReturnCode: true });

        console.log({ hasChanges });

        // if [ $? -eq 0 ]; then
        //   echo "No changes to commit"
        // else
        if (!hasChanges) {
          console.log("No changes to commit");
          return;
        }

        // current_commit_sha=$(git rev-parse HEAD)
        const currentReleaseCommitShaResult = await exec.getExecOutput("git", ["rev-parse", "HEAD"]);
        const currentReleaseCommitSha = currentReleaseCommitShaResult.stdout.trim();

        // Fetch top of current branch to allow referencing current build commit as parent on releases branch
        await exec.exec("git", ["fetch", "--depth=1", "origin", process.env.GITHUB_REF]);

        // new_commit_sha=$(git commit-tree -F ../message.txt -p "$current_commit_sha" -p "$GITHUB_SHA")
        const newCommitShaResult = await exec.getExecOutput("git", ["commit-tree", "-F", "../message.txt", "-p", currentReleaseCommitSha, "-p", process.env.GITHUB_SHA]);

        const newCommitSha = newCommitShaResult.stdout.trim();

        // git reset --hard "$new_commit_sha"
        await exec.exec("git", ["reset", "--hard", newCommitSha]);

        // branch="releases"
        const branch = "releases";

        // # Push branch (for first time)
        // git push -u origin "$branch" || true
        await exec.exec("git", ["push", "-u", "origin", branch], { silent: true, ignoreReturnCode: true });

        // for n in 1 2 3 4 5; do
        for (let n = 1; n <= 5; n++) {
          const pullResult = await exec.exec("git", ["pull", "origin", branch, "--rebase"], { silent: true, ignoreReturnCode: true });
          if (!pullResult) {
            if (n === 5) {
              throw new Error(`Failed to push after 5 attempts`);
            }

            console.log(`Failed to push, attempt ${n}`);
            await new Promise(resolve => setTimeout(resolve, n * 1000));
          }
        }

        const version = ${{ toJSON(steps.release-version.outputs.version) }};

        //   tag_name="v${{ steps.release-version.outputs.version }}"
        const tagName = `v${version}`;

        //   git tag -a "$tag_name" -F ../message.txt
        await exec.exec("git", ["tag", "-a", tagName, "-F", "../message.txt"]);
